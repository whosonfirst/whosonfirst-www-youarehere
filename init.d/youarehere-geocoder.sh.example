#!/bin/sh -e

# Starts, stops, and restarts the event server
# http://werxltd.com/wp/2012/01/05/simple-init-d-script-template/

# To make sure this runs at startup, do:
# update-rc.d youarehere-geocoder.sh defaults

JAVA=`which java`
JAVA_ARGS='-Xms6g -Xmx12g -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=384M'

TWOFISHES_HOME='/FIX-ME/PATH/TO/twofishes'
TWOFISHES_USER='www-data'

# So this assumes that you've build all your indexes and then run
#
# $> mkdir sillyivy
# $> ./sbt -Dsbt.ivy.home=sillyivy
#
# At which point you will be "in" sbt and you'll need to type
#
# > assembly 
#
# When that finishes there will be a .jar file in ./server/target â€“ that is
# your twofishes server. The hoop-jumping is hopefully temporary until some
# Java stuff I don't really understand gets sorted out. Until then this works.
# (20130330/straup)

TWOFISHES_SERVER=${TWOFISHES_HOME}'/server/target/server-assembly-FIX-ME.jar'
TWOFISHES_HBASE=${TWOFISHES_HOME}'/latest'

TWOFISHES_LOGS='/dev/null'

PIDFILE=/var/run/twofishes.pid

case $1 in
    start)

	cd ${TWOFISHES_HOME}
        echo "Starting twofishes"

	PID=`exec sudo -u ${TWOFISHES_USER} ${JAVA} ${JAVA_ARGS} -jar ${TWOFISHES_SERVER} --hfile_basepath ${TWOFISHES_HBASE} > ${TWOFISHES_LOGS} 2>&1 & echo $!`

        if [ -z $PID ]; then
            printf "%s\n" "Fail"
        else
            echo $PID > $PIDFILE
            printf "%s\n" "Ok"
	    echo $PID
        fi

        ;;
    debug)

	cd ${TWOFISHES_HOME}
        echo "Starting twofishes"

	echo exec sudo -u ${TWOFISHES_USER} ${JAVA} ${JAVA_ARGS} -jar ${TWOFISHES_SERVER} --hfile_basepath ${TWOFISHES_HBASE}
	exec sudo -u ${TWOFISHES_USER} ${JAVA} ${JAVA_ARGS} -jar ${TWOFISHES_SERVER} --hfile_basepath ${TWOFISHES_HBASE}

        ;;
    stop)
        echo "Stopping event server"

	printf "%-50s" "Stopping $NAME"
            PID=`cat $PIDFILE`
            cd $DAEMON_PATH
        if [ -f $PIDFILE ]; then
            kill -HUP $PID
            printf "%s\n" "Ok"
            rm -f $PIDFILE
        else
            printf "%s\n" "pidfile not found"
        fi

        ;;
    restart)
        $0 stop
        $0 start
        ;;
    status)
        printf "%-50s" "Checking event-server..."
        if [ -f $PIDFILE ]; then
            PID=`cat $PIDFILE`
            if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
                printf "%s\n" "Process dead but pidfile exists"
            else
                echo "Running"
            fi
        else
            printf "%s\n" "Service not running"
        fi
	;;
    *)
        echo "Usage: $0 {start|stop|restart|status|debug}" >&2
        exit 1
        ;;
esac
